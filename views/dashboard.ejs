<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="./index.css" />
    <title>Dashboard</title>
  </head>
  <body>
    <!-- start here -->
    <%- include('navbar.ejs') %>
    <!-- end here -->
    <div class="main-body" style="padding: 8px">
      <div style="display: flex; justify-content: center">
        <div style="flex-grow: 4">
          <h1>Welcome <%= username %></h1>
          <h2>You have <%= coins %> coins</h2>
        </div>
      </div>
    </div>
    <div style="margin: 8px">
      <div class="main-body">
        <div class="dropdown">
          <button
            class="btn btn-secondary dropdown-toggle"
            type="button"
            id="timerDropdownButton"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            Select Timer
          </button>
          <button type="button" class="btn btn-secondary">
            Clear Expired Due Dates
          </button>
          <ul
            class="dropdown-menu"
            aria-labelledby="timerDropdownButton"
            id="timerDropdownMenu"
          >
            <% programs.forEach(function(program) { %>
            <li>
              <a
                class="dropdown-item"
                href="/timerdata/<%= program._id %>"
                data-program="<%= JSON.stringify(program) %>"
              >
                <%= program.name %>
              </a>
            </li>
            <% }); %>
          </ul>
          <div id="time-stats" class="mt-2"></div>
        </div>
        <div id="sidebar"></div>
      </div>
    </div>
    <script>

      document.addEventListener("DOMContentLoaded", function() {
              var dueDates = <%- JSON.stringify(dueDates) %>;
              var sidebar = document.getElementById("sidebar");
              sidebar.innerHTML = "";

              if (dueDates.length === 0){

              } else{
                const sidebarDiv = document.getElementById('sidebar');
                // Set the class name
                sidebarDiv.className = 'border border-primary rounded';

                // Set the inline styles
                sidebarDiv.style.display = 'flexbox';
                sidebarDiv.style.flexGrow = '1';
                sidebarDiv.style.padding = '8px';
                sidebarDiv.style.marginTop = '5px';
                dueDates.forEach((element) => {
                var dueDateElement = document.createElement("div");
                dueDateElement.classList.add("due-date-item");

                var titleElement = document.createElement("h4");
                titleElement.style.margin = 0;
                titleElement.textContent = `${element.title}`;

                var descriptionElement = document.createElement("p");
                descriptionElement.textContent = `${element.description}`;
                descriptionElement.style.margin = 0;

                var dateElement = document.createElement("p");
                var dueDate = new Date(element.dateTime);
                dateElement.textContent = `Due Date: ${dueDate.toLocaleDateString('en-GB')}`;
                dateElement.style.margin = 0;

                var countdownElement = document.createElement("p");
                countdownElement.classList.add("countdown");
                countdownElement.style.marginBottom = '5';
                updateCountdown(dueDate, countdownElement); // Initialize the countdown
                setInterval(() => updateCountdown(dueDate, countdownElement), 1000); // Update countdown every second

                dueDateElement.appendChild(titleElement);
                dueDateElement.appendChild(descriptionElement);
                dueDateElement.appendChild(dateElement);
                dueDateElement.appendChild(countdownElement);
                sidebar.appendChild(dueDateElement);
              });

              }
            });

            function updateCountdown(dueDate, element) {
              var now = new Date();
              var distance = dueDate - now;

              if (distance < 0) {
                element.textContent = "Due date has passed.";
                return;
              }

              var days = Math.floor(distance / (1000 * 60 * 60 * 24));
              var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
              var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
              var seconds = Math.floor((distance % (1000 * 60)) / 1000);

              element.textContent = `Countdown: ${days}d ${hours}h ${minutes}m ${seconds}s`;
            }

                  function updateClock() {
                    const now = new Date();
                    const hours = now.getHours().toString().padStart(2, "0");
                    const minutes = now.getMinutes().toString().padStart(2, "0");
                    const seconds = now.getSeconds().toString().padStart(2, "0");
                    const timeString = `${hours}:${minutes}:${seconds}`;

                    document.getElementById("clock").textContent = timeString;
                  }
                  setInterval(updateClock, 1000);
                  updateClock();

                  function test(timerName, duration) {
                    var stats = document.getElementById("time-stats");
                    stats.innerHTML = `
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">${timerName}</h5>
                                    <p class="card-text">Duration: <span id="timer">${duration}</span> minutes</p>
                                    <button type="button" class="btn btn-success" onclick="startTimer(${duration})">Start!</button>
                                    <button type="button" class="btn btn-danger" onclick="deletePomo('${timerName}')">Delete</button>
                                </div>
                            </div>
                        `;
                  }

                  function startTimer(duration) {
                    var timer = duration * 60,
                      minutes,
                      seconds;
                    var display = document.getElementById("timer");
                    var interval = setInterval(function () {
                      minutes = Math.floor(timer / 60);
                      seconds = timer % 60;

                      minutes = minutes < 10 ? "0" + minutes : minutes;
                      seconds = seconds < 10 ? "0" + seconds : seconds;

                      display.textContent = minutes + ":" + seconds;

                      if (--timer < 0) {
                        clearInterval(interval);
                        var coins_earned = (duration / 5).toFixed(2); // Calculate coins earned
                        incrementCoins(coins_earned); // Pass coins_earned to incrementCoins
                      }
                    }, 1000);
                  }

                  function deletePomo(pomoName) {
                    var confirmation = prompt(
                      `Are you sure you want to delete this pomodoro? Type "DELETE" to confirm:`
                    );

                    if (confirmation === "DELETE") {
                      fetch("/delete-pomodoro", {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ timerName: pomoName }),
                      })
                        .then((response) => {
                          if (response.ok) {
                            alert("Pomodoro deleted successfully");
                            window.location.reload(); // Reload the page
                          } else {
                            throw new Error("Failed to delete pomodoro");
                          }
                        })
                        .catch((error) => {
                          console.error("Error deleting pomodoro:", error.message);
                          alert("Failed to delete pomodoro");
                        });
                    } else {
                      alert(`Deletion canceled.`);
                    }
                  }

                  async function incrementCoins(coins_earned) {
                    try {
                      let response = await fetch("/increment-coins", {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ coins: coins_earned }), // Send coins as JSON data
                      });

                      if (response.ok) {
                        alert("Timer finished! Coins incremented.");
                      } else {
                        alert("Failed to increment coins.");
                      }
                    } catch (error) {
                      alert("Error: " + error.message);
                    }
                  }
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
